{"version":3,"sources":["components/SearchBar.js","components/DayCard.js","components/DayDetail.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","CardWrapper","styled","div","props","isActive","DayCard","current","high","low","precipitation","day","icon","description","selectDay","Col","onClick","Card","CardHeader","CardBody","toFixed","src","process","alt","Math","round","StyledCard","DayDetail","weatherBitKey","REACT_APP_WEATHERBIT_KEY","geocodingKey","REACT_APP_GEOCODING_KEY","getWeather","location","axios","get","then","res","data","results","geometry","lat","lng","catch","err","console","log","App","state","days","selectedDay","searchedLocation","API","setState","city_name","state_code","this","Container","Row","md","map","key","ts","temp","max_temp","min_temp","pop","moment","datetime","format","weather","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gUAUeA,EARG,WAChB,OACE,4C,sYCAJ,IAAMC,EAAcC,IAAOC,IAAV,KAQH,SAAAC,GAAK,OAAIA,EAAMC,SAAW,iBAAmB,oBAKzC,SAAAD,GAAK,OAAIA,EAAMC,SAAW,OAAS,QACxC,SAAAD,GAAK,OAAIA,EAAMC,SAAW,QAAU,QA8ClCC,EApCC,SAAAF,GAAU,IAEtBG,EASEH,EATFG,QACAC,EAQEJ,EARFI,KACAC,EAOEL,EAPFK,IACAC,EAMEN,EANFM,cACAC,EAKEP,EALFO,IACAC,EAIER,EAJFQ,KACAC,EAGET,EAHFS,YACAC,EAEEV,EAFFU,UACAT,EACED,EADFC,SAGF,OACE,kBAACU,EAAA,EAAD,KACE,kBAACd,EAAD,CACEe,QAASF,EACTT,SAAUA,GAEV,kBAACY,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAaP,GACb,kBAACQ,EAAA,EAAD,KACE,4BAAKZ,EAAQa,QAAQ,GAArB,QACA,2BACE,yBAAKC,IAAG,UAAKC,eAAL,kBAAqCV,EAArC,QAAiDW,IAAKV,KAEhE,2BAAG,yCAAuBW,KAAKC,MAAMjB,GAArC,QACA,2BAAG,wCAAsBgB,KAAKC,MAAMhB,GAApC,QACA,2BAAG,yCAAuBC,EAA1B,U,+HCpDZ,IAAMgB,EAAaxB,YAAOe,IAAPf,CAAH,KAkCDyB,EA3BG,SAAAvB,GAAU,IAExBO,EAMEP,EANFO,IACAC,EAKER,EALFQ,KACAC,EAIET,EAJFS,YACAL,EAGEJ,EAHFI,KACAC,EAEEL,EAFFK,IACAC,EACEN,EADFM,cAGF,OACE,kBAACgB,EAAD,KACE,kBAACT,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,KACE,8CAAoBR,GACpB,2BACE,yBAAKU,IAAG,UAAKC,eAAL,kBAAqCV,EAArC,QAAiDW,IAAKV,KAEhE,2BAAG,yCAAuBW,KAAKC,MAAMjB,GAArC,QACA,2BAAG,wCAAsBgB,KAAKC,MAAMhB,GAApC,QACA,2BAAG,mDAAiCC,EAApC,S,yBC9BJkB,EAAgBN,0DAAYO,yBAE5BC,EAAeR,0DAAYS,wBAElB,GACbC,WADa,SACFC,GACT,OAAOC,IAAMC,IAAN,oEAAuEF,EAAvE,gBAAuFH,IAC3FM,MAAK,SAAAC,GAAQ,IAAD,EACUA,EAAIC,KAAKC,QAAQ,GAAGC,SAASP,SAA1CQ,EADG,EACHA,IAAKC,EADF,EACEA,IACb,OAAOR,IAAMC,IAAN,4DAA+DM,EAA/D,gBAA0EC,EAA1E,gBAAqFd,EAArF,uBAERe,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QC0EjBG,E,2MA5EbC,MAAQ,CACNC,KAAM,GAENC,YAAa,KACbC,iBAAkB,I,EAKpBnB,WAAa,SAAAC,GACXmB,EAAIpB,WAAWC,GACZG,MAAK,SAAAC,GACJQ,QAAQC,IAAIT,GACZ,EAAKgB,SAAS,CACZJ,KAAMZ,EAAIC,KAAKA,KACfa,iBAAiB,GAAD,OAAKd,EAAIC,KAAKgB,UAAd,aAA4BjB,EAAIC,KAAKiB,iBAGxDZ,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,EAE9B9B,UAAY,SAAAH,GACV,EAAK0C,SAAS,CAAEH,YAAavC,K,mFAd7B6C,KAAKxB,WAAW,gB,+BAgBR,IAAD,OACP,OACE,kBAACyB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC3C,EAAA,EAAD,CAAK4C,GAAI,GACP,qDAEF,kBAAC5C,EAAA,EAAD,CAAK4C,GAAI,GACP,kBAAC,EAAD,QAGJ,kBAACD,EAAA,EAAD,KACGF,KAAKR,MAAMC,KAAKW,KAAI,SAAAjD,GAAG,OACpB,kBAAC,EAAD,CACEkD,IAAKlD,EAAImD,GACTvD,QAASI,EAAIoD,KACbvD,KAAMG,EAAIqD,SACVvD,IAAKE,EAAIsD,SACTvD,cAAeC,EAAIuD,IACnBvD,IAAKwD,IAAOxD,EAAIyD,SAAU,cAAcC,OAAO,QAC/CzD,KAAMD,EAAI2D,QAAQ1D,KAClBC,YAAaF,EAAI2D,QAAQzD,YACzBC,UAAW,kBAAM,EAAKA,UAAUH,IAChCN,SAAU,EAAK2C,MAAME,cAAgBvC,QAK7C,kBAAC+C,EAAA,EAAD,KACE,kBAAC3C,EAAA,EAAD,KACGyC,KAAKR,MAAME,YAER,kBAAC,EAAD,CACE3C,QAASiD,KAAKR,MAAME,YAAYa,KAChCvD,KAAMgD,KAAKR,MAAME,YAAYc,SAC7BvD,IAAK+C,KAAKR,MAAME,YAAYe,SAC5BvD,cAAe8C,KAAKR,MAAME,YAAYgB,IACtCvD,IAAKwD,IAAOX,KAAKR,MAAME,YAAYkB,SAAU,cAAcC,OAAO,iBAClEzD,KAAM4C,KAAKR,MAAME,YAAYoB,QAAQ1D,KACrCC,YAAa2C,KAAKR,MAAME,YAAYoB,QAAQzD,cAI9C,0E,GAnEE0D,aCGEC,QACW,cAA7BC,OAAOxC,SAASyC,UAEe,UAA7BD,OAAOxC,SAASyC,UAEhBD,OAAOxC,SAASyC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,MAAK,SAAA+C,GACjCA,EAAaC,kB","file":"static/js/main.80b97543.chunk.js","sourcesContent":["import React from 'react'\n\nconst SearchBar = () => {\n  return (\n    <div>\n      Search Bar\n    </div>\n  )\n}\n\nexport default SearchBar;","import React from 'react';\nimport { Card, CardHeader, CardBody, Col } from \"reactstrap\";\nimport styled from 'styled-components';\n\nconst CardWrapper = styled.div`\n  h3 {\n    font-weight: 900;\n  }\n  img {\n    width: 75px;\n  }\n  .card {\n    border: ${props => props.isActive ? '2px solid blue' : '2px solid gray'};\n    cursor: pointer;\n    text-align: center;\n  }\n  .card-header {\n    background: ${props => props.isActive ? 'blue' : null};\n    color: ${props => props.isActive ? 'white' : null};\n  }\n  :hover {\n    .card {\n      border: 2px solid blue;\n\n    }\n  }\n`\n\nconst DayCard = props => {\n  const { \n    current, \n    high, \n    low, \n    precipitation, \n    day, \n    icon, \n    description, \n    selectDay,\n    isActive,\n  } = props;\n\n  return (\n    <Col>\n      <CardWrapper\n        onClick={selectDay}\n        isActive={isActive}\n      >\n        <Card>\n          <CardHeader>{day}</CardHeader>\n          <CardBody>\n            <h3>{current.toFixed(1)}°</h3>\n            <p>\n              <img src={`${process.env.PUBLIC_URL}/icons/${icon}.png`} alt={description} />\n            </p>\n            <p><strong>High:</strong>{Math.round(high)}°</p>\n            <p><strong>Low:</strong>{Math.round(low)}°</p>\n            <p><strong>Rain:</strong>{precipitation}%</p>\n          </CardBody>\n        </Card>\n      </CardWrapper>\n    </Col>\n  )\n}\n\nexport default DayCard;\n","import React from 'react';\nimport { Card, CardBody } from \"reactstrap\";\nimport styled from \"styled-components\";\n\nconst StyledCard = styled(Card)`\n  text-align: center;\n  h2 {\n    color: violet;\n  }\n`\n\nconst DayDetail = props => {\n  const {\n    day,\n    icon,\n    description,\n    high,\n    low,\n    precipitation,\n  } = props;\n  \n  return (\n    <StyledCard>\n      <Card>\n        <CardBody>\n          <h2>Day Detail for {day}</h2>\n          <p>\n            <img src={`${process.env.PUBLIC_URL}/icons/${icon}.png`} alt={description} />\n          </p>\n          <p><strong>High:</strong>{Math.round(high)}°</p>\n          <p><strong>Low:</strong>{Math.round(low)}°</p>\n          <p><strong>Chance of rain:</strong>{precipitation}%</p>\n        </CardBody>\n      </Card>\n    </StyledCard>\n  )\n}\n\nexport default DayDetail\n\n","import axios from 'axios';\nconst weatherBitKey = process.env.REACT_APP_WEATHERBIT_KEY;\n// const geocodingKey = `AIzaSyC6HzREB1jogrz8EDUPXvYflDxAi5sKpHE`;\nconst geocodingKey = process.env.REACT_APP_GEOCODING_KEY;\n\nexport default {\n  getWeather(location) { \n    return axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${location}&key=${geocodingKey}`)\n      .then(res => {\n        const { lat, lng } = res.data.results[0].geometry.location;\n        return axios.get(`https://api.weatherbit.io/v2.0/forecast/daily?lat=${lat}&lon=${lng}&key=${weatherBitKey}&days=7&units=I`)\n      })\n      .catch(err => console.log(err))\n  }\n}","import React, { Component } from 'react';\nimport { Container, Row, Col } from \"reactstrap\";\nimport moment from 'moment';\nimport SearchBar from './components/SearchBar';\nimport DayCard from './components/DayCard';\nimport DayDetail from './components/DayDetail';\nimport sampleData from './data/sample.json';\nimport API from './utils/API';\n\nclass App extends Component {\n  state = {\n    days: [],\n    // days: sampleData.data,\n    selectedDay: null,\n    searchedLocation: '',\n  }\n  componentDidMount() {\n    this.getWeather('Denver, CO');\n  }\n  getWeather = location => {\n    API.getWeather(location)\n      .then(res => {\n        console.log(res);\n        this.setState({ \n          days: res.data.data,\n          searchedLocation: `${res.data.city_name}, ${res.data.state_code}`\n        })\n      })\n      .catch(err => console.log(err))\n  }\n  selectDay = day => {\n    this.setState({ selectedDay: day })\n  }\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col md={7}>\n            <h1>Weather for location</h1>\n          </Col>\n          <Col md={5}>\n            <SearchBar></SearchBar>\n          </Col>\n        </Row>\n        <Row>\n          {this.state.days.map(day => (\n              <DayCard \n                key={day.ts} \n                current={day.temp}\n                high={day.max_temp}\n                low={day.min_temp}\n                precipitation={day.pop}\n                day={moment(day.datetime, \"YYYY-MM-DD\").format(\"dddd\")}\n                icon={day.weather.icon}\n                description={day.weather.description}\n                selectDay={() => this.selectDay(day)}\n                isActive={this.state.selectedDay === day}\n              />\n            )\n          )}\n        </Row>\n        <Row>\n          <Col>\n            {this.state.selectedDay \n              ? (\n                <DayDetail \n                  current={this.state.selectedDay.temp}\n                  high={this.state.selectedDay.max_temp}\n                  low={this.state.selectedDay.min_temp}\n                  precipitation={this.state.selectedDay.pop}\n                  day={moment(this.state.selectedDay.datetime, \"YYYY-MM-DD\").format(\"MMMM Do, YYYY\")}\n                  icon={this.state.selectedDay.weather.icon}\n                  description={this.state.selectedDay.weather.description}\n                />\n              )\n              : (\n                <h2>Choose a day about for more details</h2>\n              )\n            }\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}